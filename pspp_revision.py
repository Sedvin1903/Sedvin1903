# -*- coding: utf-8 -*-
"""PSPP REVISION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QogsWHTOOuvhm0r_1Xvowi4jCIHOj5_0
"""

def display_board(board):
    
   Board = []
  
   if board == 1:
        for i in range(4):
            print("+-------+-------+-------+")
            for j in range(2):
                if j == 1 :
                    EMPTY = 0
                    for l in range(1):
                        row = [EMPTY for l in range(3)]
                        Board.append(row)
                        print("|  ",(Board[l][l])+1,"  |  ",(Board[l][l])+2,"  |  ",(Board[l][l])+3,"  |")
                        Board[l][l] = Board[l][l] + 3
                        
                if i == 3:
                    break
                print("|       |       |       |")

from random import randrange

def DisplayBoard(board):
	print("+-------" * 3,"+",sep="")
	for row in range(3):
		print("|       " * 3,"|",sep="")
		for col in range(3):
			print("|   " + str(board[row][col]) + "   ",end="")
		print("|")
		print("|       " * 3,"|",sep="")
		print("+-------" * 3,"+",sep="")

def EnterMove(board):
	ok = False	# fake assumption - we need it to enter the loop
	while not ok:
		move = input("Enter your move: ") 
		ok = len(move) == 1 and move >= '1' and move <= '9' # is user's input valid?
		if not ok:
			print("Bad move - repeat your input!") # no, it isn't - do the input again
			continue
		move = int(move) - 1 	# cell's number from 0 to 8
		row = move // 3 	# cell's row
		col = move % 3		# cell's column
		sign = board[row][col]	# check the selected square
		ok = sign not in ['O','X'] 
		if not ok:	# it's occupied - to the input again
			print("Field already occupied - repeat your input!")
			continue
	board[row][col] = 'O' 	# set '0' at the selected square

def MakeListOfFreeFields(board):
	free = []	# the list is empty initially
	for row in range(3): # iterate through rows
		for col in range(3): # iterate through columns
			if board[row][col] not in ['O','X']: # is the cell free?
				free.append((row,col)) # yes, it is - append new tuple to the list
	return free


def VictoryFor(board,sgn):
	if sgn == "X":	# are we looking for X?
		who = 'me'	# yes - it's computer's side
	elif sgn == "O": # ... or for O?
		who = 'you'	# yes - it's our side
	else:
		who = None	# we should not fall here!
	cross1 = cross2 = True  # for diagonals
	for rc in range(3):
		if board[rc][0] == sgn and board[rc][1] == sgn and board[rc][2] == sgn:	# check row rc
			return who
		if board[0][rc] == sgn and board[1][rc] == sgn and board[2][rc] == sgn: # check column rc
			return who
		if board[rc][rc] != sgn: # check 1st diagonal
			cross1 = False
		if board[2 - rc][2 - rc] != sgn: # check 2nd diagonal
			cross2 = False
	if cross1 or cross2:
		return who
	return None

def DrawMove(board):
	free = MakeListOfFreeFields(board) # make a list of free fields
	cnt = len(free)
	if cnt > 0:	# if the list is not empty, choose a place for 'X' and set it
		this = randrange(cnt)
		row, col = free[this]
		board[row][col] = 'X'

board = [ [3 * j + i + 1 for i in range(3)] for j in range(3) ] #   i = row j = column
board[1][1] = 'X' # set first 'X' in the middle
free = MakeListOfFreeFields(board)
humanturn = True # which turn is it now?
while len(free):
	DisplayBoard(board)
	if humanturn:
		EnterMove(board)
		victor = VictoryFor(board,'O')
	else:	
		DrawMove(board)
		victor = VictoryFor(board,'X')
	if victor != None:
		break
	humanturn = not humanturn		
	free = MakeListOfFreeFields(board)

DisplayBoard(board)
if victor == 'you':
	print("You won!")
elif victor == 'me':
	print("I won")
else:
	print("Tie!")

# 1] Calculate average of numbers in a list
Numlist = []
NoV = int(input("Enter the range of the list: "))
for i in range(NoV):
  Elements = int(input("Enter the value: ")) 
  Numlist.append(Elements)
print(Numlist)
AVERAGE = float((sum(Numlist)//int(NoV)))
print("Sum of the numbers in the list    : " ,sum(Numlist))
print("Average of the numbers in the list: " ,AVERAGE)

import math 

# Compute e^a, log x(base 10), ln y,tan(b),sinh(z) 
E = math.e

print("The Reult of e^a is",  x + y,"and of Type - ",pow(E,a) , type(pow(E,a))) 
print("The Reult of log x(base 10) is", math.log(x,10) ,"and of Type - ",type(math.log(x,10)) )
print("The Reult of ln y is", math.log(x, E),"and of Type - ",type(math.log(x, E))) 
print("The Reult of tan(b),is",math.tan(b),"and of Type - ",type(math.tan(b)))
print("The Reult of sinh(z)  is",math.sinh(z),"and of Type - ",type(math.sinh(z)))

a = 20
b = 10
c = 15
d = 5
e = (a+b)*c/d
print(e)

StudentsList = Sl = list() 

# Read the Number of Data to be created
Nor = int(input("Enter how many Data to be created:"))
for i in range(Nor):

# Now creating a another list that will be appended in the main list and thus become as Nested List
  Element = [str(input("Student_Name:")),int(input("Roll_No:")),int(input("Subject1_mark:")),int(input("Subject2_mark:")),int(input("Subject3_mark:")),int(input("Subject4_mark:"))]
  Sl.append(Element)
grade =  (sum(Element[1:5])//4) 
print(grade)
for i in range(0,Sl,+1):
  if grade>95 and grade<100:
    print("The grade of the student :",'O')
  elif grade>80 and grade<94:
    print("The grade of the student :",'A+')
  else :
    print("The grade of the student :",'B' )

# PASCHAL TRIANGLE 1
n=int(input("Enter number of rows: "))
a=[]
for i in range(n):
    a.append([])
    a[i].append(1)
    for j in range(1,i):
        a[i].append(a[i-1][j-1]+a[i-1][j])
    if(n!=0):
        a[i].append(1)
for i in range(n):
    print("   "*(n-i),end=" ",sep=" ")
    for j in range(0,i+1):
        print('{0:6}'.format(a[i][j]),end=" ",sep=" ")
    print()

# PASCHAL TRINAGLE 2
from math import factorial 
  n=int(input("Enter number of rows: "))
for i in range(n): 
    for j in range(n-i+1): 
        print(end=" ")   
    for j in range(i+1):  
        print(factorial(i)//(factorial(j)*factorial(i-j)), end=" ") 
    print()

#CONTINUE STATEMENT
for i in "welcome":
  if i == "c":
    continue
  print(i)

#PASS STATEMENT
for i in "welcome":
  if i == "c":
    pass
  print(i)

# ARMSTRONG NUMBER is a number that is equal to the sum of cubes of its digits.
Num  = N = int(input("Enter the number: "))
S = 0
while (N!= 0):  # N is not equal to zero
  r = N % 10       
  S = S+(r*r*r) # Syntax = Eg: 370 = (3^3+7^3+0^3) = 27 + 343 + 0
  N = int(N/10)

print(S)
if (S == Num):
  print(" The given numbers is a armstrong number ")
else:
  print( "The given number is not an armstrong number")



# To program for a multiplication table of n
n = int(input("Enter the number : "))
print("The Multiplication table of ", n ,"is :" )
print("-----------------------------") 
for i in range(1,13):
  N = n*i
  print( n,'x',i,"=", N)
print("-----------------------------")

SOD = 0
n = int(input("Enter the number : "))
while n != 0:
  N = n % 10 
  SOD = SOD + N
  n = int(n/10)
print( "The SUM of Digits of the given number is :" , SOD)

# Reverse of number
PN = int(input("Enter the number : "))
Reverse = 0 
pn = PN
while (pn>0): 
  Remainder = pn % 10
  Reverse = ((Reverse *10)+ Remainder) 
  pn = pn//10
print( "The Reverse of the given number : " , Reverse)

# Write a PROGRAM for performing   # SUM OF n NATURAL NUMBERS using   "  WHILE LOOP  "
# Reading User Values as it should follow Num <= n 
Num = int(input("Enter the value of Num :"))
n   = int(input("Enter the value of n :"))
a = 0
# Using while loop conditining the statement to perform sum of n natural numbers
while (Num <= n):
  a = a + Num
  Num = Num + 1
#Print SUM of n natural numbers
print("SUM =",a)

# Write a PROGRAM TO Check whether the given number is a Palindrome
pnum = int(input("Enter the value of PNum :"))

# Assuming Revese as 0 & PNum as pnum
Reverse = 0
PNum    = pnum
# Using while loop to make a decision  
while (PNum > 0):
  Remainder = PNum % 10 
  Reverse = ((Reverse*10) + Remainder)    
  PNum = PNum // 10
print("The Reverse of the given num is:",Reverse) # Print Reverse
# Condition applied to check Whether pnum == Reverse  
if (pnum == Reverse):
  print("The given num is a palindrome")
else:
  print("The given num is not a palindrome")

def swap(at,bt):
  swap =  (bt,at)= (at,bt)
  return (at,bt)

a = int(input("Enter the value of a:"))
b = int(input("Enter the value of b:"))
print("The order of the given numbers:",(a,b))
print("Swaped order of the given numbers:",swap(a,b))

# EVEN or ODD program
NUM = int(input("Enter the value:"))
if NUM % 2 == 0 :
  print("The given number is EVEN")
else:
  print("The given number is ODD")

# + (or) -   
N = No_ = int(input("Enter the value:"))
if N == 0 :
  print("The given number is POSITIVE")
elif N < 0:
  print("The given number is NEGATIVE")
else:
  print("The given number is POSITIVE")

# Write a PROGRAM for performing   # SUM OF n NATURAL NUMBERS using   "  FOR LOOP  "
num = int(input("Enter the value:"))
SUM = 0
for num in range(1,num+1):
  SUM = SUM + num 
  num = num + 1
print("SUM =",SUM)

#
a = NUM_1 = int(input("Enter the value of NUM_1:")) 
b = NUM_2 = int(input("Enter the value of NUM_2:"))
c = NUM_3 = int(input("Enter the value of NUM_3:"))
if (a > b) and (a > c):
  print("NUM_1 is the greatest number of the all three numbers")
elif (b > a) and (b > c):
  print("NUM_2 is the greatest number of the all three numbers")
else :
  print("NUM_3 is the greatest number of the all three numbers")

# String Questions
STRING = 'Loyola College'
# 1] Length of the string
print("1.Length of the string:",len(STRING))
# 2] Reverse of words in a string 
print("2.Reverse of words in a string:",STRING[::-1])
# 3] Display string multiple times
n = int(input("3.[i].Enter how many times does string wanted to be printed:"))
print("3.[ii].Display string",n,"times:",STRING*n)
# 4] To concatenate two string
str1 = 'Loyola'
str2 = 'College'
STR = str1+str2
print("4.Concatenation of two strings:",STR)
# 5] String Slicing
Str1  = "South India"
print("5.String slicing:",Str1[6::])

# List Questions
LIST = []
NOV = int(input("Enter the range of the list:"))
for i in range(NOV):
  Elements = int(input("Enter the values of the list:"))
  LIST.append(Elements)
# 1] To add new elements to a list
nr = int(input("Enter the range of ne:"))
for i in range(nr):
  ne = int(input("Enter the new element:"))
  L = LIST.append(ne)
print("Elements added List:",LIST)
# 2] Reverse elements in a list
print("Reversed list:",LIST[::-1]) 
# 3] Display elements of list multiple times
N = int(input("3.[i].Enter how many times does list wanted to be printed:"))
print("3.[ii].Display list",n,"times:",LIST*N)
# 4] To concatenate two list
List1 = [1,2,3]
List2 = [4,5,6]
print("4.Concatenation of two lists:",List1+List2)
# 5] TO sort a list in asending order 
LIST.sort()
print("Sorted list:",LIST)

# Program to list even and odd numbers of a list----- 1
LiST = []
r = int(input("Enter the range:"))
for i in range(r):
  element = e = int(input("Enter the new element:"))
  l = LiST.append(e)
print(LiST)
for x in LiST: 
  if x % 2 == 0:
    print("The EVEN numbers of the list:",x)
  else :
    print("The ODD numbers of the list:",x)

# Program to list even and odd numbers of a list----- 2
R = int(input("Enter the range:"))
LIST = [ x for x in range(0,R) ]
for x in LIST:
  if x % 2 == 0:
    print("The EVEN numbers of the list:",x)
  else :
    print("The ODD numbers of the list:",x)



# EVEN NUMLIST 
Even_Num = [ e for e in range(0,100) if e % 2 == 0]
SOE = sum( Even_Num )# Sum of Even_Numlist
print(Even_Num)  
print("The Sum of even numbers upto 100 is :",SOE)

# ODD NUMLIST
Odd_Num = [  o for o in range(0,50) if o % 2 == 1]
SOOD = sum( Odd_Num )# Sum of Odd_Numlist 
print(Odd_Num) 
print("The Sum of odd numbers upto 50 is :",SOOD)

r = int(input("Enter the value:"))
for i in range (r, 0, -1): 
    print((r-i) * ' ' + i * '*')